// üéØ Fun√ß√µes com Objetos como Argumentos (JavaScript)

// ‚úÖ O que √© isso?
// Quando temos muitos dados relacionados (como informa√ß√µes de um cliente ou pedido),
// podemos agrupar esses dados dentro de um objeto e, assim, passar o objeto como argumento
// para uma fun√ß√£o, em vez de passar v√°rios par√¢metros separados.

// üöÄ Vantagens:
// - Deixa o c√≥digo mais organizado e limpo.
// - Reduz a quantidade de par√¢metros na fun√ß√£o.
// - Facilita a manuten√ß√£o e leitura do c√≥digo.

// üîπ Exemplo de Objeto:
let pedido = {
  id: 1234,
  nome: "Theo",
  email: "Theo@gmail.com",
  x_salada: 30,
  refri: 10,
};

// üîπ Maneira tradicional (sem passar o objeto diretamente):
function enviarNot(nome, email, idPedido) {
  console.log(
    `Enviando email para ${email} confirmando o pedido n√∫mero ${idPedido}`
  );
  console.log(`Mensagem: ${nome}, pedido confirmado!`);
}

// Chamando a fun√ß√£o com propriedades individuais:
enviarNot(pedido.nome, pedido.email, pedido.id);

// üîπ Fun√ß√£o que processa itens do pedido:
function processarPedido(id, i1, i2) {
  let totalPedido = i1 + i2;
  console.log(`Pedido: ${id} processado.`);
  console.log(`Total do pedido: R$${totalPedido}`);
  return totalPedido;
}

// Chamando a fun√ß√£o:
let retorno = processarPedido(pedido.id, pedido.x_salada, pedido.refri);
console.log(retorno); // Sa√≠da: 40

// ‚öôÔ∏è üî• Melhorando o c√≥digo: Passando o OBJETO DIRETAMENTE na fun√ß√£o

function enviarNotMelhorado(pedido) {
  console.log(
    `Enviando email para ${pedido.email} confirmando o pedido n√∫mero ${pedido.id}`
  );
  console.log(`Mensagem: ${pedido.nome}, pedido confirmado!`);
}

enviarNotMelhorado(pedido);

// Outra fun√ß√£o usando objeto:
function processarPedidoMelhorado(pedido) {
  let total = pedido.x_salada + pedido.refri;
  console.log(`Pedido: ${pedido.id} processado.`);
  console.log(`Total do pedido: R$${total}`);
  return total;
}

let total = processarPedidoMelhorado(pedido);
console.log(total); // Sa√≠da: 40

// ‚úÖ ‚ö†Ô∏è Observa√ß√£o:
// Se o objeto crescer (adicionar mais produtos, por exemplo), a fun√ß√£o continua funcionando sem precisar alterar a quantidade de par√¢metros.
