// üéØ Declara√ß√£o vs. Express√£o de Fun√ß√£o (JavaScript)

// ‚úÖ O que s√£o Fun√ß√µes?
// Fun√ß√µes s√£o blocos de c√≥digo que podem ser executados sempre que forem chamados.
// Elas recebem par√¢metros (opcional), processam informa√ß√µes e podem retornar um resultado.

// üö© Tipos de Cria√ß√£o de Fun√ß√£o no JavaScript:

// üîπ 1. Declara√ß√£o de Fun√ß√£o (Function Declaration)
// - Maneira tradicional de criar fun√ß√µes.
// - Usa a palavra-chave 'function' seguida do nome da fun√ß√£o.
// - Sofre hoisting (pode ser chamada antes da linha em que foi declarada).

// Sintaxe:
function nomeDaFuncao(param1, param2) {
  // bloco de c√≥digo
  return resultado;
}

// Exemplo:
function soma(n1, n2) {
  return n1 + n2;
}

let resultado = soma(6, 8);
console.log(resultado); // Sa√≠da: 14


// üîπ 2. Express√£o de Fun√ß√£o (Function Expression)
// - A fun√ß√£o √© atribu√≠da a uma vari√°vel.
// - Pode ser uma fun√ß√£o an√¥nima (sem nome) ou nomeada.
// - N√ÉO sofre hoisting (s√≥ pode ser chamada depois de ser criada).

// Sintaxe:
const nomeDaFuncao = function(param1, param2) {
  // bloco de c√≥digo
  return resultado;
};

// Exemplo:
let soma1 = function(n1, n2) {
  return n1 + n2;
};

console.log(soma1(6, 5)); // Sa√≠da: 11


// ‚ö†Ô∏è Diferen√ßa Principal:
// - Declara√ß√£o: Pode ser chamada antes da linha onde foi escrita.
// - Express√£o: S√≥ pode ser chamada depois da linha em que foi criada.


// üöÄ Resumo R√°pido:
// | Tipo                | Hoisting | Sintaxe                          | Quando Usar                         |
// |---------------------|----------|-----------------------------------|--------------------------------------|
// | Declara√ß√£o          | ‚úîÔ∏è       | function nome(){}                | Fun√ß√µes reutiliz√°veis e gerais       |
// | Express√£o (an√¥nima) | ‚ùå       | const nome = function(){}        | Fun√ß√µes dentro de vari√°veis, callbacks|
